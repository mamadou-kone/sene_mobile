import 'package:http/http.dart' as http;
import 'dart:convert';
import '../../models/investissement.dart';
import '../config.dart';

class InvestissementService {
  Future<void> investir(Investissement investissement) async {
    final response = await http.post(
      Uri.parse('${Config.baseUrl}/investissement'),
      headers: {
        'Content-Type': 'application/json',
      },
      body: json.encode(investissement.toJson()),
    );

    if (response.statusCode != 200) {
      throw Exception('Erreur lors de l\'investissement');
    }
  }

  Future<List<Investissement>> getAllInvestissements() async {
    final response = await http.get(
      Uri.parse('${Config.baseUrl}/investissement'),
      headers: {
        'Content-Type': 'application/json',
      },
    );
    if (response.statusCode == 200) {
      List<dynamic> jsonResponse = json.decode(response.body);
      return jsonResponse
          .map((invest) => Investissement.fromJson(invest))
          .toList();
    } else {
      throw Exception('Erreur lors de la récupération des investissements');
    }
  }

  Future<List<Investissement>> getInvestissementsByUser(String userId) async {
    final response = await http.get(
        Uri.parse('${Config.baseUrl}/investissement/investisseur/$userId'));
    print(response.body);

    if (response.statusCode == 200) {
      try {
        final jsonData = json.decode(response.body);
        print(jsonData);

        // Gestion des différents formats de réponse possibles
        if (jsonData is List) {
          print(jsonData);
          return jsonData

              .map((invest) => Investissement.fromJson(invest))
              .toList();
        } else if (jsonData is Map && jsonData.containsKey('investissements')) {
          final investmentsData = jsonData['investissements'] as List;
          return investmentsData
              .map((invest) => Investissement.fromJson(invest))
              .toList();
        } else {
          print('Réponse JSON inattendue : $jsonData');
          return []; // Retourne une liste vide en cas de format inattendu
        }
      } catch (e) {
        print('Erreur lors du parsing JSON : $e');
        rethrow; // Relance l'exception pour être gérée par le FutureBuilder
      }
    } else {
      throw Exception(
          'Erreur lors de la récupération des investissements : ${response.statusCode}');
    }
  }
}
